QUOTES = [
    "Treat global variables like someone has a knife to your throat.",
    "Hate working with undocumented code? Get into the habit of writing comments to enforce better habits for others to adopt.",
    "Learn to start one programming language and stick with that. Build a solid foundation first.",
    "Don't choke up on syntax. It hardly matters. Try to work on your logics and patterns.",
    "Use a Coding Standard to increase readability of code.",
    "Write Useful Comments to open doors for collaboration.",
    "Stuck on a problem? Write it out. It'll open up different angles that you couldn't see before.",
    "The most disastrous thing that you can ever learn is your first programming language. Oh, and then comes exiting vim/nano.",
    "Learning to code is learning to create and innovate.",
    "When naming variables, use meaningful names.",
    "Don’t rely on coffee or energy drinks to keep you ‘buzzing’. This is a clear indication that you’re too tired to do good work.",
    "Use version control software to help manage your source code better.",
    "In your own time, work on your own code. Do something fun. Do something pointless. Abandon with abandon. There is no pressure to finish anything other than the pressure you put on yourself",
    "Do not repeat code: use loops or functions instead",
    "Group global variables into records, objects or structures",
    "Set some time aside to work on technical debt.",
    "Throw yourself in the deep end once in a while. You'll come out stronger and more confident.",
    "Never copy-paste the code, Understand the logic behind the program.",
    "To improve your skills write the same code until you fully satisfied that you will never forget the code.",
    "Clean code is the best form of documentation",
    "An UI is like a joke. If you have to explain it, it’s not that good.",
    "Backward compatability: keeping our old mistakes",
    "Profanity is the one language all programmers know best.",
    "Developer: an organism that turns coffee into code.",
    "The best error message is the one that never shows up - Thomas Fuchs",
    "The most damaging phrase in the language is...it has always been done this way - Grace Hopper",
    "Don’t worry if it doesn’t work right. If everything did, you’d be out of a job",
    "Did you know? The collective noun for a group of programmers is a merge-conflict.",
    "Simplcitity > Complexity",
    "Do not complicate a problem by overengineering.",
    "You don't need to know everything at the beginning. Focus on the fundamentals first.",
    "Set goals to complete the game. Set systems to continue playing the game.",
    "Try coding by hand. Your career might depend on it",
    "Get the basics nailed. You’ll reap the rewards long term.",
    "Learn to fail fast",
    "When developing web apps, ensure that you test on different browsers.",
    "Finding it difficult to remember concepts? Try explaining it to someone.",
    "Make mistakes, ask questions, get rapid feedback, get uncomfortable, compare it to what you know, keep going.",
    "Good programmers know what to write, but great ones know what to rewrite (and reuse).",
    "Googling is a crucial developer skill.",
    "Don’t be afraid to share your unfinished work with others frequently.",
    "It's always best to get another pair of eyes so code reviews are important.",
    "There's never enough. Always keep learning.",
    "Do not be afraid to reuse your code from existing projects",
    "git log --graph --decorate --oneline --all\nShows all your branches/commits in a pretty graph.",
    "Focus on learning a language, not a framework. By this I mean JavaScript > (React || Angular || Vue.js).",
    "Writing tests saves time. Really. Though it takes a lot of discipline to actually write them.",
    "Try to make your code as general as possible. This allows for extensions later on",
    "Try to automate repetitive time consuming tasks.",
    "Logging is crucial to software development. It gives you an audit trail of where things went wrong.",
    "Break tasks down into the smallest pieces possible.",
    "Stuck on a problem for hours? TAKE A BREAK.\nYour brain is exhausted and needs time to recharge.",
    "Code formatters can save you a lot of time trying to tidy up your code.",
    "Coding is thinking, not writing. That’s why people say think 10 times, then write code.",
    "Want to run your scripts daily/weekly/monthly but don't know how? Look into cronjobs",
    "To improve your skills write the same code until you fully satisfied that you will never forget the code.",
    "Focus on fixing your own problems. Linus Torvalds only wrote Linux and Git because he wanted to fix problems he had himself.",
    "Use the internet. Every problem you have in the first year you learn to program is a problem 100 other people have had before you.",
    "Be obsessively consistent in everything. Names, syntax, patterns etc.",
    "Refactoring your code frequently will reduce technical debt in the long run.",
    "Learn Object Oriented Programming to build reusable components.",
    "Don't be afraid to fail. We learn from experience. It consolidates our existing knowledge.",
    "Dependencies are a nightmare to maintain. Only use them when you really have to.",
    "When using libraries/tools it's best to start with the official documentation.",
    "Keep working on pet projects to build up your portfolio.",
    "There will be a time where you will have to touch frontend and backend. Diversification is important!",
    "Think twice code once.",
    "Don't be afraid to ask for help. People learn by teaching.",
    "Think out loud during a coding interview. This shows interviewers you can problem solve.",
    "Best way to get better at programming is to program. Consistency is key.",
    "You'll break things; everyone does at some point. Learn from it.",
    "Do not learn a language to follow the crowd. Learn it to build what you envision",
    "Learn by hands on coding, not just reading.",
    "Start looking at other peoples code. There'll come a time where you have to work on existing codebases.",
    "Have an idea for a product? Try coding the minimal requirements first.",
    "Build things you enjoy. You'll learn more that way.",
    "The code you write today can empower someone tomorrow.",
    "git commit -m 'fix x'\ngit commit -m 'another fix for x'\ngit commit -m 'final fix for x'\n\nHave to thank git for squash and rebase.",
    "Platforms developers should sign up on to enhance their portfolio:\n- GitHub - Storing source code\n- LinkedIn - Networking with recruiters\n- StackOverflow - Network with developers",
    "JS Question: What is Hoisting and why is it used?",
    "Python Question: What immutable types does Python support?",
    "JS Question: Do you know what ASI is?",
    "JS Question: Explain the differences between var, let, const.",
    "Remember to delete obsolete code",
    "Get into the habit of pushing to seperate branches other than master. Open a PR to merge.",
    "Learn to debug. You can print out variables with console.log() in JS and print() in python.",
    "Modularize your code; ensure that you do not stuff everything into one file",
    "Remember to commit frequently. This makes it 10x easier to find and fix bugs.",
    "Do not rely on a framework or library. That library may discontinue support in the future.",
    "By sharing your knowledge, it'll not only help others but also strengthen your memory.",
    "Do 'man <insert cmd here>' on linux to get more information on a command",
    "Split up a function or method if it has too many arguments.",
    "Many companies use Docker for software deployment so it's important to know how containers work.",
    "Perfect UI: Does not redirect users.",
    "Learning to code but too busy? Try doing 5 minutes everyday until those 5 minutes turn into 5 hours without you noticing.",
    "Interview tip: When solving a problem, write down your thoughts. This shows interviewers you can problem solve.",
    "I wonder if coding courses teach the basics of googling coding problems.",
    "Purpose of software engineering is to reduce complexity not create it.",
    "If debugging is the process of removing bugs then programming must be the process of putting them in - Dijkstra",
    "You want less code to do more things, not more code to do less things.",
    "Engineers: If it aint broke it hasn't got enough features.",
    "Imagine life without version control systems like Git. We'd be sending source code files via email.",
    "To think my first programming language was Java and now I barely use it.",
    "Before picking up a framework, ensure you get comfortable with the underlying programming language.",
    "What would you have replaced \"Hello World\" with?",
    "Do you code better in the morning or evening?",
    "Person: On my mark...3..2..1...GO!'\nDeveloper: What are you waiting for? Say 0 already",
    "rm -rf 2020\n\ngit delete 2020\n\ndel 2020\n\nIf only it was that easy.",
    "What aided you the most when coding? Books, videos or online tutorials?",
    "Try think of everyday problems you have. Use a programming language to solve it.",
    "Am I the only one that is really picky when it comes to typos in documentation/comments?",
    "What is the one thing a developer cannot live without?",
    "As a developer, how many hours of sleep are you averaging?",
    "Do you use git on the command line or as a plugin in your IDE?\n\nI prefer using the CLI",
    "Today's plan: undefined",
    "The greatest threat to success is boredom.\n\nOnce you develop a desire to code, success is imminent.",
    "Being a jack of all trades is often frown upon. In the tech industry, it's one of the greatest skills to have.",
    "You should always add comments to your code. In 6 months another person may pick it up.",
    "Remember to keep asking questions. Even senior developers do it.",
    "I cannot stress enough how important it is for a developer to push their projects on GitHub. This allows you to showcase some of your best work.",
    "Linux or windows for coding?",
    "Always assume your code has bugs in it.",
    "If coffee didn't exist, what would developers drink for fuel instead?",
    "Anyone can write a program that a computer understands. Good programmers write programs that others can understand.",
    "When someone finds out you code:\n\"Can you hack\"?",
    "I make notes on everything. It helps me retain the majority of my knowledge.",
    "If you were to interview a developer, what would you ask them?\nWrong questions only.\n\nMe: Print out the alphabet using integers only.",
    "It's harder to read code than to write it - Joel spolsky",
    "One thing developers cannot master: naming things", 
    "Simplicity is a prequisite for reliability - Edsger Dijkstra",
    "Make sure to add logs to your code. It provides you with an audit trail.",
    "Coding is similar to riding a bicycle or driving a car. If you don't do it for ages, you'll get rusty.",
    "Automate tedious repetitive tasks.",
    "Tech job adverts are full of many buzzwords. Instead of trying to learn all those technologies at once, try and prioritise what you think will benefit you in the long run.",
    "If you could go back in time, what would you tell your younger self before you started coding?",
    "Try out pair programming with someone. Not only will it prepare you for interviews, but it'll give you the opportunity to work with other developers.",
    "When you're not coding what do you do?",
    "Short code is better than longer if you achieve the same result.",
    "Do not hide bugs. Solve them.",
    "Do you have a home office?",
    "If you could rename Github, what would you call it?",
    "It's important to learn different types of data structures to appropiately store certain data.",
    "Sorting algorithms can help you efficiently order information. See if they can help you!",
    "Why did you want to start coding?",
    "Morning: Wakes up and starts coding.\n\nEvening: Sleeps and dreams about code.",
    "What's your most important question to ask if you were to interview a developer?",
    "I have a degree in Computer Science but the majority of the programming languages and tools I have learnt are attributed to self learning.\n\nAt some point in time everyone teaches themselves.",
    "Do you listen to any tech podcasts?"
]
